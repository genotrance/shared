/* Generated by the Nim Compiler v0.20.2 */
/*   (c) 2019 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI130 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI162074 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI4062 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI164579 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI42448 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI42444 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI42440 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI42436 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI42432 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI42428 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI42424 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI42420 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI42416 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI42412 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI42408 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI42404 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI42400 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI42396 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI42392 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI42388 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI42384 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI42380 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI42376 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI42372 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI42205 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI42283 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI42281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI42227 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI42565 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI42563 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI42561 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI42231 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI42229 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI44305 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI4050 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4058 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI21156 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI4008 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4114 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI4108 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI4026 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4028 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4042 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4046 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI4046 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI4046.node = NNI4046;
var NNI4042 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI4042.node = NNI4042;
var NNI4028 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI4028.node = NNI4028;
NTI4108.base = NTI4026;
NTI4114.base = NTI4026;
var NNI4026 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI4108, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI114, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI4114, name: "up", sons: null}]};
NTI4026.node = NNI4026;
var NNI4008 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI4008.node = NNI4008;
NTI4026.base = NTI4008;
NTI4028.base = NTI4026;
NTI4042.base = NTI4028;
NTI4046.base = NTI4042;
var NNI21156 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI21156.node = NNI21156;
var NNI4058 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI4058.node = NNI4058;
NTI4058.base = NTI4028;
var NNI4050 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI4050.node = NNI4050;
NTI4050.base = NTI4028;
NTI42561.base = NTI42229;
NTI42563.base = NTI42229;
NTI42565.base = NTI42229;
var NNI42227 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI42227, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI42227, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI42227, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI42227, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI42227, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI42227, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI42227, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI42227, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI42227, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI42227, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI42227, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI42227, name: "NotationNode", len: 0, sons: null}}};
NTI42227.node = NNI42227;
var NNI42283 = {kind: 2, len: 91, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI140, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI140, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI140, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI140, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI140, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI140, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI140, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI140, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI140, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI140, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI140, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI140, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI140, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI140, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI140, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI140, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI140, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI140, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI140, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI140, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI140, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI140, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI140, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI140, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI140, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI140, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI140, name: "bottom", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI140, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI140, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI140, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI140, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI140, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI140, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI140, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI140, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI140, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI140, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI140, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI140, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI140, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI140, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI140, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI140, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI140, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI140, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI140, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI140, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI140, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI140, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI140, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI140, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI140, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI140, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI140, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI140, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI140, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI140, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI140, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI140, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI140, name: "minWidth", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI140, name: "overflow", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI140, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI140, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI140, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI140, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI140, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI140, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI140, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI140, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI140, name: "position", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI140, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI140, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI140, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI140, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI140, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI140, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI140, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI140, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI140, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI140, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI140, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI140, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI140, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI140, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI140, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI140, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI140, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI140, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI140, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI140, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI104, name: "zIndex", sons: null}]};
NTI42283.node = NNI42283;
NTI42283.base = NTI4008;
NTI42281.base = NTI42283;
var NNI42231 = {kind: 2, len: 14, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI42561, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI42563, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI42565, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI140, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI42229, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI42229, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI42229, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI140, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI42227, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI140, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI42229, name: "parentNode", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI42229, name: "previousSibling", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI140, name: "innerHTML", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI42281, name: "style", sons: null}]};
NTI42231.node = NNI42231;
var NNI42205 = {kind: 2, len: 20, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI42372, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI42376, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI42380, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI42384, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI42388, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI42392, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI42396, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI42400, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI42404, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI42408, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI42412, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI42416, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI42420, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI42424, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI42428, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI42432, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI42436, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI42440, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI42444, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI42448, name: "onunload", sons: null}]};
NTI42205.node = NNI42205;
NTI42205.base = NTI4008;
NTI42231.base = NTI42205;
NTI42229.base = NTI42231;
NTI44305.base = NTI42229;
NTI164579.base = NTI140;
var NNI4062 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI4062.node = NNI4062;
NTI4062.base = NTI4028;
var NNI162074 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI104, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI130, name: "Field1", sons: null}]};
NTI162074.node = NNI162074;

function makeNimstrLit(c_23254) {
		  var ln = c_23254.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_23254.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_24427, src_24428, ti_24429) {
	var result_24619 = null;

		switch (ti_24429.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_24401(ti_24429))) {
			result_24619 = src_24428;
			}
			else {
				result_24619 = [src_24428[0], src_24428[1]];
			}
			
			break;
		case 19:
			      if (dest_24427 === null || dest_24427 === undefined) {
        dest_24427 = {};
      }
      else {
        for (var key in dest_24427) { delete dest_24427[key]; }
      }
      for (var key in src_24428) { dest_24427[key] = src_24428[key]; }
      result_24619 = dest_24427;
    
			break;
		case 18:
		case 17:
			if (!((ti_24429.base == null))) {
			result_24619 = nimCopy(dest_24427, src_24428, ti_24429.base);
			}
			else {
			if ((ti_24429.kind == 17)) {
			result_24619 = (dest_24427 === null || dest_24427 === undefined) ? {m_type: ti_24429} : dest_24427;
			}
			else {
				result_24619 = (dest_24427 === null || dest_24427 === undefined) ? {} : dest_24427;
			}
			}
			nimCopyAux(result_24619, src_24428, ti_24429.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_24428 === null) {
        result_24619 = null;
      }
      else {
        if (dest_24427 === null || dest_24427 === undefined) {
          dest_24427 = new Array(src_24428.length);
        }
        else {
          dest_24427.length = src_24428.length;
        }
        result_24619 = dest_24427;
        for (var i = 0; i < src_24428.length; ++i) {
          result_24619[i] = nimCopy(result_24619[i], src_24428[i], ti_24429.base);
        }
      }
    
			break;
		case 28:
			      if (src_24428 !== null) {
        result_24619 = src_24428.slice(0);
      }
    
			break;
		default: 
			result_24619 = src_24428;
			break;
		}

	return result_24619;

}

function arrayConstr(len_24686, value_24687, typ_24688) {
		    var result = new Array(len_24686);
    for (var i = 0; i < len_24686; ++i) result[i] = nimCopy(null, value_24687, typ_24688);
    return result;
  

	
}

function cstrToNimstr(c_23271) {
		  var ln = c_23271.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_23271.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_23271.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_23288) {
		  if (s_23288 === null) return "";
  var len = s_23288.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_23288[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_23288[i] < 128)
      asciiPart[i] = fcc(s_23288[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_21618, ename_21619) {
		e_21618.name = ename_21619;
		if ((excHandler == 0)) {
		unhandledException(e_21618);
		}
		
		e_21618.trace = nimCopy(null, raw_write_stack_trace_21468(), NTI138);
		throw e_21618;

	
}

function addInt(a_23603, b_23604) {
		    var result = a_23603 + b_23604;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function chckIndx(i_24705, a_24706, b_24707) {
			var Tmp1;

	var result_24708 = 0;

	BeforeRet: do {
			if (!(a_24706 <= i_24705)) Tmp1 = false; else {				Tmp1 = (i_24705 <= b_24707);			}		if (Tmp1) {
		result_24708 = i_24705;
		break BeforeRet;
		}
		else {
		raiseIndexError(i_24705, a_24706, b_24707);
		}
		
	} while (false);

	return result_24708;

}

function subInt(a_23621, b_23622) {
		    var result = a_23621 - b_23622;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet2 = setConstr([65, 90]);

function chckRange(i_24724, a_24725, b_24726) {
			var Tmp1;

	var result_24727 = 0;

	BeforeRet: do {
			if (!(a_24725 <= i_24724)) Tmp1 = false; else {				Tmp1 = (i_24724 <= b_24726);			}		if (Tmp1) {
		result_24727 = i_24724;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_24727;

}
var ConstSet3 = setConstr(95, 32, 46);
var ConstSet4 = setConstr(95, 32, 46);

function mulInt(a_23639, b_23640) {
		    var result = a_23639 * b_23640;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet5 = setConstr([97, 122]);
var ConstSet6 = setConstr([65, 90], [97, 122]);
var ConstSet7 = setConstr([97, 122]);
var ConstSet8 = setConstr([65, 90]);

function nimMax(a_24021, b_24022) {
		var Tmp1;

	var result_24023 = 0;

	BeforeRet: do {
		if ((b_24022 <= a_24021)) {
		Tmp1 = a_24021;
		}
		else {
		Tmp1 = b_24022;
		}
		
		result_24023 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_24023;

}

function nimMin(a_24003, b_24004) {
		var Tmp1;

	var result_24005 = 0;

	BeforeRet: do {
		if ((a_24003 <= b_24004)) {
		Tmp1 = a_24003;
		}
		else {
		Tmp1 = b_24004;
		}
		
		result_24005 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_24005;

}
var nim_program_result = 0;
var global_raise_hook_18618 = [null];
var local_raise_hook_18623 = [null];
var out_of_mem_hook_18626 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var alternative_164315 = [null];

function is_fat_pointer_24401(ti_24403) {
	var result_24404 = false;

	BeforeRet: do {
		result_24404 = !((ConstSet1[ti_24403.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_24404;

}

function nimCopyAux(dest_24432, src_24433, n_24435) {
		switch (n_24435.kind) {
		case 0:
			break;
		case 1:
			      dest_24432[n_24435.offset] = nimCopy(dest_24432[n_24435.offset], src_24433[n_24435.offset], n_24435.typ);
    
			break;
		case 2:
			    for (var i = 0; i < n_24435.sons.length; i++) {
      nimCopyAux(dest_24432, src_24433, n_24435.sons[i]);
    }
    
			break;
		case 3:
			      dest_24432[n_24435.offset] = nimCopy(dest_24432[n_24435.offset], src_24433[n_24435.offset], n_24435.typ);
      for (var i = 0; i < n_24435.sons.length; ++i) {
        nimCopyAux(dest_24432, src_24433, n_24435.sons[i][1]);
      }
    
			break;
		}

	
}

function add_18638(x_18641, x_18641_Idx, y_18642) {
		      if (x_18641[x_18641_Idx] === null) { x_18641[x_18641_Idx] = []; }
      var off = x_18641[x_18641_Idx].length;
      x_18641[x_18641_Idx].length += y_18642.length;
      for (var i = 0; i < y_18642.length; ++i) {
        x_18641[x_18641_Idx][off+i] = y_18642.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_21151(f_21153) {
					var Tmp3;

	var result_21154 = [null];

		var it_21162 = f_21153;
		var i_21164 = 0;
		var total_21166 = 0;
		var temp_frames_21173 = arrayConstr(64, {Field0: null, Field1: 0}, NTI21156);
		L1: do {
				L2: while (true) {
					if (!!((it_21162 == null))) Tmp3 = false; else {						Tmp3 = (i_21164 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_21173[i_21164].Field0 = it_21162.procname;
					temp_frames_21173[i_21164].Field1 = it_21162.line;
					i_21164 += 1;
					total_21166 += 1;
					it_21162 = it_21162.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_21162 == null))) break L5;
					total_21166 += 1;
					it_21162 = it_21162.prev;
				}
		} while(false);
		result_21154[0] = nimCopy(null, [], NTI138);
		if (!((total_21166 == i_21164))) {
		if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(makeNimstrLit("(")); } else { result_21154[0] = makeNimstrLit("("); };
		if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(cstrToNimstr(((total_21166 - i_21164))+"")); } else { result_21154[0] = cstrToNimstr(((total_21166 - i_21164))+"").slice(); };
		if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_21154[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_21421 = 0;
			var colontmp__164456 = 0;
			colontmp__164456 = (i_21164 - 1);
			var res_164461 = colontmp__164456;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_164461)) break L8;
						j_21421 = res_164461;
						add_18638(result_21154, 0, temp_frames_21173[j_21421].Field0);
						if ((0 < temp_frames_21173[j_21421].Field1)) {
						if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(makeNimstrLit(", line: ")); } else { result_21154[0] = makeNimstrLit(", line: "); };
						if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(cstrToNimstr((temp_frames_21173[j_21421].Field1)+"")); } else { result_21154[0] = cstrToNimstr((temp_frames_21173[j_21421].Field1)+"").slice(); };
						}
						
						if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(makeNimstrLit("\x0A")); } else { result_21154[0] = makeNimstrLit("\x0A"); };
						res_164461 -= 1;
					}
			} while(false);
		} while(false);

	return result_21154[0];

}

function raw_write_stack_trace_21468() {
	var result_21470 = null;

		if (!((framePtr == null))) {
		result_21470 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_21151(framePtr) || []), NTI138);
		}
		else {
			result_21470 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_21470;

}

function unhandledException(e_21529) {
		var buf_21530 = [[]];
		if (!(((e_21529.message != null ? e_21529.message.length : 0) == 0))) {
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_21530[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(e_21529.message); } else { buf_21530[0] = e_21529.message.slice(); };
		}
		else {
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_21530[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit(" [")); } else { buf_21530[0] = makeNimstrLit(" ["); };
		add_18638(buf_21530, 0, e_21529.name);
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("]\x0A")); } else { buf_21530[0] = makeNimstrLit("]\x0A"); };
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(raw_write_stack_trace_21468()); } else { buf_21530[0] = raw_write_stack_trace_21468().slice(); };
		var cbuf_21601 = toJSStr(buf_21530[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_21601);
  }
  else {
    throw cbuf_21601;
  }
  

	
}

function raiseOverflow() {
		var e_22042 = null;
		e_22042 = {m_type: NTI4046, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_22042.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_22042.parent = null;
		raiseException(e_22042, "OverflowError");

	
}

function is_whitespace_163654(text_163656) {
		     return !/[^\s]/.test(text_163656);
  

	
}

function is_whitespace_163671(x_163673) {
		var Tmp1;
		var Tmp2;

	var result_163674 = false;

	var F={procname:"dochack.isWhitespace",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 134;
		if (!(x_163673.nodeName == "#text")) Tmp2 = false; else {			Tmp2 = is_whitespace_163654(x_163673.textContent);		}		if (Tmp2) Tmp1 = true; else {			Tmp1 = (x_163673.nodeName == "#comment");		}		result_163674 = Tmp1;
	framePtr = F.prev;

	return result_163674;

}

function raiseIndexError(i_22639, a_22640, b_22641) {
		var Tmp1;

		var e_22802 = null;
		e_22802 = {m_type: NTI4058, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		if ((b_22641 < a_22640)) {
		Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
		}
		else {
		Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_22639)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_22640)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_22641)+"") || []);
		}
		
		e_22802.message = nimCopy(null, Tmp1, NTI138);
		e_22802.parent = null;
		raiseException(e_22802, "IndexError");

	
}

function to_toc_163688(x_163690, father_163691) {
								var Tmp5;
						var Tmp6;
						var Tmp7;
						var Tmp8;
			var Tmp15;

	var F={procname:"dochack.toToc",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if ((x_163690.nodeName == "UL")) {
		F.line = 139;
		var f_163710 = {heading: null, kids: [], sortId: (father_163691.kids != null ? father_163691.kids.length : 0), doSort: false};
		F.line = 140;
		var i_163712 = 0;
		L1: do {
			F.line = 141;
				L2: while (true) {
				if (!(i_163712 < x_163690.childNodes.length)) break L2;
					F.line = 142;
					var nxt_163713 = addInt(i_163712, 1);
					L3: do {
						F.line = 143;
							L4: while (true) {
								if (!(nxt_163713 < x_163690.childNodes.length)) Tmp5 = false; else {									Tmp5 = is_whitespace_163671(x_163690.childNodes[nxt_163713]);								}							if (!Tmp5) break L4;
								F.line = 144;
								nxt_163713 = addInt(nxt_163713, 1);
							}
					} while(false);
						if (!(nxt_163713 < x_163690.childNodes.length)) Tmp8 = false; else {							Tmp8 = (x_163690.childNodes[i_163712].nodeName == "LI");						}						if (!Tmp8) Tmp7 = false; else {							Tmp7 = (x_163690.childNodes[i_163712].childNodes.length == 1);						}						if (!Tmp7) Tmp6 = false; else {							Tmp6 = (x_163690.childNodes[nxt_163713].nodeName == "UL");						}					if (Tmp6) {
					F.line = 147;
					var e_163738 = {heading: x_163690.childNodes[i_163712].childNodes[0], kids: [], sortId: (f_163710.kids != null ? f_163710.kids.length : 0), doSort: false};
					F.line = 148;
					var it_163739 = x_163690.childNodes[nxt_163713];
					L9: do {
						F.line = 149;
						var j_163747 = 0;
						F.line = 2716;
						var colontmp__164432 = 0;
						F.line = 149;
						colontmp__164432 = it_163739.childNodes.length;
						F.line = 2717;
						var i_164433 = 0;
						L10: do {
							F.line = 2718;
								L11: while (true) {
								if (!(i_164433 < colontmp__164432)) break L11;
									F.line = 149;
									j_163747 = i_164433;
									F.line = 150;
									to_toc_163688(it_163739.childNodes[j_163747], e_163738);
									F.line = 2720;
									i_164433 = addInt(i_164433, 1);
								}
						} while(false);
					} while(false);
					F.line = 151;
					if (f_163710.kids != null) { f_163710.kids.push(e_163738); } else { f_163710.kids = [e_163738]; };
					F.line = 152;
					i_163712 = addInt(nxt_163713, 1);
					}
					else {
						F.line = 154;
						to_toc_163688(x_163690.childNodes[i_163712], f_163710);
						F.line = 155;
						i_163712 = addInt(i_163712, 1);
					}
					
				}
		} while(false);
		F.line = 156;
		if (father_163691.kids != null) { father_163691.kids.push(f_163710); } else { father_163691.kids = [f_163710]; };
		}
		else {
		if (is_whitespace_163671(x_163690)) {
		}
		else {
		if ((x_163690.nodeName == "LI")) {
		F.line = 160;
		var idx_163782 = [];
		L12: do {
			F.line = 161;
			var i_163790 = 0;
			F.line = 2716;
			var colontmp__164437 = 0;
			F.line = 161;
			colontmp__164437 = x_163690.childNodes.length;
			F.line = 2717;
			var i_164438 = 0;
			L13: do {
				F.line = 2718;
					L14: while (true) {
					if (!(i_164438 < colontmp__164437)) break L14;
						F.line = 161;
						i_163790 = i_164438;
						if (!(is_whitespace_163671(x_163690.childNodes[i_163790]))) {
						F.line = 162;
						if (idx_163782 != null) { idx_163782.push(i_163790); } else { idx_163782 = [i_163790]; };
						}
						
						F.line = 2720;
						i_164438 = addInt(i_164438, 1);
					}
			} while(false);
		} while(false);
			if (!((idx_163782 != null ? idx_163782.length : 0) == 2)) Tmp15 = false; else {				Tmp15 = (x_163690.childNodes[idx_163782[chckIndx(1, 0, idx_163782.length+0-1)-0]].nodeName == "UL");			}		if (Tmp15) {
		F.line = 164;
		var e_163821 = {heading: x_163690.childNodes[idx_163782[chckIndx(0, 0, idx_163782.length+0-1)-0]], kids: [], sortId: (father_163691.kids != null ? father_163691.kids.length : 0), doSort: false};
		F.line = 166;
		var it_163822 = x_163690.childNodes[idx_163782[chckIndx(1, 0, idx_163782.length+0-1)-0]];
		L16: do {
			F.line = 167;
			var j_163830 = 0;
			F.line = 2716;
			var colontmp__164443 = 0;
			F.line = 167;
			colontmp__164443 = it_163822.childNodes.length;
			F.line = 2717;
			var i_164444 = 0;
			L17: do {
				F.line = 2718;
					L18: while (true) {
					if (!(i_164444 < colontmp__164443)) break L18;
						F.line = 167;
						j_163830 = i_164444;
						F.line = 168;
						to_toc_163688(it_163822.childNodes[j_163830], e_163821);
						F.line = 2720;
						i_164444 = addInt(i_164444, 1);
					}
			} while(false);
		} while(false);
		F.line = 169;
		if (father_163691.kids != null) { father_163691.kids.push(e_163821); } else { father_163691.kids = [e_163821]; };
		}
		else {
			L19: do {
				F.line = 171;
				var i_163845 = 0;
				F.line = 2716;
				var colontmp__164448 = 0;
				F.line = 171;
				colontmp__164448 = x_163690.childNodes.length;
				F.line = 2717;
				var i_164449 = 0;
				L20: do {
					F.line = 2718;
						L21: while (true) {
						if (!(i_164449 < colontmp__164448)) break L21;
							F.line = 171;
							i_163845 = i_164449;
							F.line = 172;
							to_toc_163688(x_163690.childNodes[i_163845], father_163691);
							F.line = 2720;
							i_164449 = addInt(i_164449, 1);
						}
				} while(false);
			} while(false);
		}
		
		}
		else {
			F.line = 174;
		if (father_163691.kids != null) { father_163691.kids.push({heading: x_163690, kids: [], sortId: (father_163691.kids != null ? father_163691.kids.length : 0), doSort: false}); } else { father_163691.kids = [{heading: x_163690, kids: [], sortId: (father_163691.kids != null ? father_163691.kids.length : 0), doSort: false}]; };
		}
		}}
	framePtr = F.prev;

	
}

function extract_items_163339(x_163341, heading_163342, items_163345, items_163345_Idx) {
			var Tmp1;

	var F={procname:"dochack.extractItems",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((x_163341 == null)) {
		F.line = 81;
		break BeforeRet;
		}
		
			if (!!((x_163341.heading == null))) Tmp1 = false; else {				Tmp1 = (x_163341.heading.textContent == heading_163342);			}		if (Tmp1) {
		L2: do {
			F.line = 83;
			var i_163374 = 0;
			F.line = 2716;
			var colontmp__164475 = 0;
			F.line = 83;
			colontmp__164475 = (x_163341.kids != null ? x_163341.kids.length : 0);
			F.line = 2717;
			var i_164476 = 0;
			L3: do {
				F.line = 2718;
					L4: while (true) {
					if (!(i_164476 < colontmp__164475)) break L4;
						F.line = 83;
						i_163374 = i_164476;
						F.line = 84;
						if (items_163345[items_163345_Idx] != null) { items_163345[items_163345_Idx].push(x_163341.kids[chckIndx(i_163374, 0, x_163341.kids.length+0-1)-0].heading); } else { items_163345[items_163345_Idx] = [x_163341.kids[chckIndx(i_163374, 0, x_163341.kids.length+0-1)-0].heading]; };
						F.line = 2720;
						i_164476 = addInt(i_164476, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			L5: do {
				F.line = 86;
				var i_163394 = 0;
				F.line = 2716;
				var colontmp__164480 = 0;
				F.line = 86;
				colontmp__164480 = (x_163341.kids != null ? x_163341.kids.length : 0);
				F.line = 2717;
				var i_164481 = 0;
				L6: do {
					F.line = 2718;
						L7: while (true) {
						if (!(i_164481 < colontmp__164480)) break L7;
							F.line = 86;
							i_163394 = i_164481;
							F.line = 87;
							var it_163395 = x_163341.kids[chckIndx(i_163394, 0, x_163341.kids.length+0-1)-0];
							F.line = 88;
							extract_items_163339(it_163395, heading_163342, items_163345, items_163345_Idx);
							F.line = 2720;
							i_164481 = addInt(i_164481, 1);
						}
				} while(false);
			} while(false);
		}
		
	} while (false);
	framePtr = F.prev;

	
}

function tree_163020(tag_163022, kids_163024) {
	var result_163025 = null;

	var F={procname:"dochack.tree",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 11;
		result_163025 = document.createElement(toJSStr(tag_163022));
		L1: do {
			F.line = 12;
			var k_163056 = null;
			F.line = 3;
			var i_164498 = 0;
			L2: do {
				F.line = 4;
					L3: while (true) {
					if (!(i_164498 < (kids_163024 != null ? kids_163024.length : 0))) break L3;
						F.line = 12;
						k_163056 = kids_163024[chckIndx(i_164498, 0, kids_163024.length+0-1)-0];
						F.line = 13;
						result_163025.appendChild(k_163056);
						F.line = 6;
						i_164498 = addInt(i_164498, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_163025;

}

function text_163152(s_163154) {
	var result_163155 = null;

	var F={procname:"dochack.text",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 27;
		result_163155 = document.createTextNode(s_163154);
	framePtr = F.prev;

	return result_163155;

}

function sys_fatal_14862(message_14866) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
	framePtr = F;
		F.line = 34;
		var e_15003 = null;
		F.line = 37;
		e_15003 = {m_type: NTI4050, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 38;
		e_15003.message = nimCopy(null, message_14866, NTI138);
		F.line = 39;
		raiseException(e_15003, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_14858(msg_14860) {
	var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
	framePtr = F;
		F.line = 20;
		sys_fatal_14862(msg_14860);
	framePtr = F.prev;

	
}

function failed_assert_impl_15051(msg_15053) {
	var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
	framePtr = F;
		F.line = 27;
		raise_assert_14858(msg_15053);
	framePtr = F.prev;

	
}

function uncovered_163940(x_163942) {
			var Tmp1;
		var Tmp2;

	var result_163943 = null;

	var F={procname:"dochack.uncovered",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
			if (!((x_163942.kids != null ? x_163942.kids.length : 0) == 0)) Tmp1 = false; else {				Tmp1 = !((x_163942.heading == null));			}		if (Tmp1) {
		F.line = 194;
		if (!(x_163942.heading.hasOwnProperty('__karaxMarker__'))) {
		Tmp2 = x_163942;
		}
		else {
		Tmp2 = null;
		}
		
		result_163943 = Tmp2;
		break BeforeRet;
		}
		
		F.line = 195;
		result_163943 = {heading: x_163942.heading, kids: [], sortId: x_163942.sortId, doSort: x_163942.doSort};
		L3: do {
			F.line = 197;
			var i_163982 = 0;
			F.line = 2716;
			var colontmp__164510 = 0;
			F.line = 197;
			colontmp__164510 = (x_163942.kids != null ? x_163942.kids.length : 0);
			F.line = 2717;
			var i_164511 = 0;
			L4: do {
				F.line = 2718;
					L5: while (true) {
					if (!(i_164511 < colontmp__164510)) break L5;
						F.line = 197;
						i_163982 = i_164511;
						F.line = 198;
						var y_163983 = uncovered_163940(x_163942.kids[chckIndx(i_163982, 0, x_163942.kids.length+0-1)-0]);
						if (!((y_163983 == null))) {
						F.line = 199;
						if (result_163943.kids != null) { result_163943.kids.push(y_163983); } else { result_163943.kids = [y_163983]; };
						}
						
						F.line = 2720;
						i_164511 = addInt(i_164511, 1);
					}
			} while(false);
		} while(false);
		if (((result_163943.kids != null ? result_163943.kids.length : 0) == 0)) {
		F.line = 200;
		result_163943 = null;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_163943;

}

function merge_tocs_164017(orig_164019, news_164020) {
	var result_164021 = null;

	var F={procname:"dochack.mergeTocs",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 203;
		result_164021 = uncovered_163940(orig_164019);
		if ((result_164021 == null)) {
		F.line = 205;
		result_164021 = news_164020;
		}
		else {
			L1: do {
				F.line = 207;
				var i_164042 = 0;
				F.line = 2716;
				var colontmp__164504 = 0;
				F.line = 207;
				colontmp__164504 = (news_164020.kids != null ? news_164020.kids.length : 0);
				F.line = 2717;
				var i_164505 = 0;
				L2: do {
					F.line = 2718;
						L3: while (true) {
						if (!(i_164505 < colontmp__164504)) break L3;
							F.line = 207;
							i_164042 = i_164505;
							F.line = 208;
							if (result_164021.kids != null) { result_164021.kids.push(news_164020.kids[chckIndx(i_164042, 0, news_164020.kids.length+0-1)-0]); } else { result_164021.kids = [news_164020.kids[chckIndx(i_164042, 0, news_164020.kids.length+0-1)-0]]; };
							F.line = 2720;
							i_164505 = addInt(i_164505, 1);
						}
				} while(false);
			} while(false);
		}
		
	framePtr = F.prev;

	return result_164021;

}

function build_toc_164063(orig_164065, types_164067, procs_164068) {
	var result_164069 = null;

	var F={procname:"dochack.buildToc",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 211;
		var new_stuff_164083 = {heading: null, kids: [], doSort: true, sortId: 0};
		L1: do {
			F.line = 212;
			var t_164214 = null;
			F.line = 185;
			var i_164493 = 0;
			F.line = 186;
			var l_164494 = (types_164067 != null ? types_164067.length : 0);
			L2: do {
				F.line = 187;
					L3: while (true) {
					if (!(i_164493 < l_164494)) break L3;
						F.line = 212;
						t_164214 = types_164067[chckIndx(i_164493, 0, types_164067.length+0-1)-0];
						F.line = 213;
						var c_164228 = {heading: t_164214.cloneNode(true), kids: [], doSort: true, sortId: 0};
						F.line = 214;
						t_164214.__karaxMarker__ = true;
						L4: do {
							F.line = 215;
							var p_164235 = null;
							F.line = 185;
							var i_164490 = 0;
							F.line = 186;
							var l_164491 = (procs_164068 != null ? procs_164068.length : 0);
							L5: do {
								F.line = 187;
									L6: while (true) {
									if (!(i_164490 < l_164491)) break L6;
										F.line = 215;
										p_164235 = procs_164068[chckIndx(i_164490, 0, procs_164068.length+0-1)-0];
										if (!(p_164235.hasOwnProperty('__karaxMarker__'))) {
										F.line = 217;
										var xx_164236 = p_164235.parentNode.getElementsByClassName("attachedType");
										if ((((xx_164236 != null ? xx_164236.length : 0) == 1) && (xx_164236[chckIndx(0, 0, xx_164236.length+0-1)-0].textContent == t_164214.textContent))) {
										F.line = 220;
										var q_164244 = tree_163020(makeNimstrLit("A"), [text_163152(p_164235.title)]);
										F.line = 221;
										q_164244.setAttribute("href", p_164235.getAttribute("href"));
										F.line = 222;
										if (c_164228.kids != null) { c_164228.kids.push({heading: q_164244, kids: [], sortId: 0, doSort: false}); } else { c_164228.kids = [{heading: q_164244, kids: [], sortId: 0, doSort: false}]; };
										F.line = 223;
										p_164235.__karaxMarker__ = true;
										}
										
										}
										
										F.line = 189;
										i_164490 = addInt(i_164490, 1);
										if (!(((procs_164068 != null ? procs_164068.length : 0) == l_164491))) {
										F.line = 190;
										failed_assert_impl_15051(makeNimstrLit("C:\\Users\\gt\\.choosenim\\toolchains\\nim-0.20.2.64\\lib\\system\\iterators.nim(190, 11) `len(a) == L` the length of the seq changed while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 224;
						if (new_stuff_164083.kids != null) { new_stuff_164083.kids.push(c_164228); } else { new_stuff_164083.kids = [c_164228]; };
						F.line = 189;
						i_164493 = addInt(i_164493, 1);
						if (!(((types_164067 != null ? types_164067.length : 0) == l_164494))) {
						F.line = 190;
						failed_assert_impl_15051(makeNimstrLit("C:\\Users\\gt\\.choosenim\\toolchains\\nim-0.20.2.64\\lib\\system\\iterators.nim(190, 11) `len(a) == L` the length of the seq changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 225;
		result_164069 = merge_tocs_164017(orig_164065, new_stuff_164083);
	framePtr = F.prev;

	return result_164069;

}

function add_163085(parent_163087, kid_163088) {
			var Tmp1;
				var Tmp2;

	var F={procname:"dochack.add",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
			if (!(parent_163087.nodeName == "TR")) Tmp1 = false; else {				if ((kid_163088.nodeName == "TD")) Tmp2 = true; else {					Tmp2 = (kid_163088.nodeName == "TH");				}				Tmp1 = Tmp2;			}		if (Tmp1) {
		F.line = 18;
		var k_163089 = document.createElement("TD");
		F.line = 19;
		k_163089.appendChild(kid_163088);
		F.line = 20;
		parent_163087.appendChild(k_163089);
		}
		else {
			F.line = 22;
		parent_163087.appendChild(kid_163088);
		}
		
	framePtr = F.prev;

	
}

function set_class_163103(e_163105, value_163106) {
	var F={procname:"dochack.setClass",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 25;
		e_163105.setAttribute("class", toJSStr(value_163106));
	framePtr = F.prev;

	
}

function to_html_163424(x_163426, is_root_163427) {
			var Tmp1;

		function HEX3Aanonymous_163467(a_163469, b_163470) {
					var Tmp1;

			var result_163471 = 0;

			var F={procname:"toHtml.:anonymous",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
			BeforeRet: do {
					if (!!((a_163469.heading == null))) Tmp1 = false; else {						Tmp1 = !((b_163470.heading == null));					}				if (Tmp1) {
				F.line = 106;
				var x_163488 = a_163469.heading.textContent;
				F.line = 107;
				var y_163489 = b_163470.heading.textContent;
				if ((x_163488 < y_163489)) {
				F.line = 108;
				result_163471 = -1;
				break BeforeRet;
				}
				
				if ((y_163489 < x_163488)) {
				F.line = 109;
				result_163471 = 1;
				break BeforeRet;
				}
				
				F.line = 110;
				result_163471 = 0;
				break BeforeRet;
				}
				else {
					F.line = 113;
					result_163471 = subInt(a_163469.sortId, b_163470.sortId);
					break BeforeRet;
				}
				
			} while (false);
			framePtr = F.prev;

			return result_163471;

		}

	var result_163428 = null;

	var F={procname:"dochack.toHtml",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((x_163426 == null)) {
		F.line = 91;
		result_163428 = null;
		break BeforeRet;
		}
		
		if (((x_163426.kids != null ? x_163426.kids.length : 0) == 0)) {
		if ((x_163426.heading == null)) {
		F.line = 93;
		result_163428 = null;
		break BeforeRet;
		}
		
		F.line = 94;
		result_163428 = x_163426.heading.cloneNode(true);
		break BeforeRet;
		}
		
		F.line = 95;
		result_163428 = tree_163020(makeNimstrLit("DIV"), []);
			if (!!((x_163426.heading == null))) Tmp1 = false; else {				Tmp1 = !(x_163426.heading.hasOwnProperty('__karaxMarker__'));			}		if (Tmp1) {
		F.line = 97;
		add_163085(result_163428, x_163426.heading.cloneNode(true));
		}
		
		F.line = 98;
		var ul_163464 = tree_163020(makeNimstrLit("UL"), []);
		if (is_root_163427) {
		F.line = 100;
		set_class_163103(ul_163464, makeNimstrLit("simple simple-toc"));
		}
		else {
			F.line = 102;
		set_class_163103(ul_163464, makeNimstrLit("simple"));
		}
		
		if (x_163426.doSort) {
		F.line = 104;
		x_163426.kids.sort(HEX3Aanonymous_163467);
		}
		
		L2: do {
			F.line = 115;
			var k_163614 = null;
			F.line = 183;
			var colontmp__164517 = null;
			F.line = 115;
			colontmp__164517 = x_163426.kids;
			F.line = 185;
			var i_164519 = 0;
			F.line = 186;
			var l_164520 = (colontmp__164517 != null ? colontmp__164517.length : 0);
			L3: do {
				F.line = 187;
					L4: while (true) {
					if (!(i_164519 < l_164520)) break L4;
						F.line = 115;
						k_163614 = colontmp__164517[chckIndx(i_164519, 0, colontmp__164517.length+0-1)-0];
						F.line = 116;
						var y_163615 = to_html_163424(k_163614, false);
						if (!((y_163615 == null))) {
						F.line = 118;
						add_163085(ul_163464, tree_163020(makeNimstrLit("LI"), [y_163615]));
						}
						
						F.line = 189;
						i_164519 = addInt(i_164519, 1);
						if (!(((colontmp__164517 != null ? colontmp__164517.length : 0) == l_164520))) {
						F.line = 190;
						failed_assert_impl_15051(makeNimstrLit("C:\\Users\\gt\\.choosenim\\toolchains\\nim-0.20.2.64\\lib\\system\\iterators.nim(190, 11) `len(a) == L` the length of the seq changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (!((ul_163464.childNodes.length == 0))) {
		F.line = 119;
		add_163085(result_163428, ul_163464);
		}
		
		if ((result_163428.childNodes.length == 0)) {
		F.line = 120;
		result_163428 = null;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_163428;

}

function replace_by_id_163172(id_163174, new_tree_163175) {
	var F={procname:"dochack.replaceById",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 32;
		var x_163176 = document.getElementById(id_163174);
		F.line = 33;
		x_163176.parentNode.replaceChild(new_tree_163175, x_163176);
		F.line = 34;
		new_tree_163175.id = id_163174;
	framePtr = F.prev;

	
}

function togglevis_164329(d_164331) {
	var F={procname:"dochack.togglevis",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 230;
		    if (d_164331.style.display == 'none')
      d_164331.style.display = 'inline';
    else
      d_164331.style.display = 'none';
  
	framePtr = F.prev;

	
}

function groupBy(value_164347) {
	var F={procname:"dochack.groupBy",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 238;
		var toc_164348 = document.getElementById("toc-list");
		if ((alternative_164315[0] == null)) {
		F.line = 240;
		var tt_164367 = {heading: null, kids: [], sortId: 0, doSort: false};
		F.line = 241;
		to_toc_163688(toc_164348, tt_164367);
		F.line = 242;
		tt_164367 = tt_164367.kids[chckIndx(0, 0, tt_164367.kids.length+0-1)-0];
		F.line = 244;
		var types_164382 = [[]];
		F.line = 245;
		var procs_164397 = [[]];
		F.line = 247;
		extract_items_163339(tt_164367, "Types", types_164382, 0);
		F.line = 248;
		extract_items_163339(tt_164367, "Procs", procs_164397, 0);
		F.line = 249;
		extract_items_163339(tt_164367, "Converters", procs_164397, 0);
		F.line = 250;
		extract_items_163339(tt_164367, "Methods", procs_164397, 0);
		F.line = 251;
		extract_items_163339(tt_164367, "Templates", procs_164397, 0);
		F.line = 252;
		extract_items_163339(tt_164367, "Macros", procs_164397, 0);
		F.line = 253;
		extract_items_163339(tt_164367, "Iterators", procs_164397, 0);
		F.line = 255;
		var ntoc_164405 = build_toc_164063(tt_164367, types_164382[0], procs_164397[0]);
		F.line = 256;
		var x_164406 = to_html_163424(ntoc_164405, true);
		F.line = 257;
		alternative_164315[0] = tree_163020(makeNimstrLit("DIV"), [x_164406]);
		}
		
		if ((value_164347 == "type")) {
		F.line = 259;
		replace_by_id_163172("tocRoot", alternative_164315[0]);
		}
		else {
			F.line = 261;
		replace_by_id_163172("tocRoot", tree_163020(makeNimstrLit("DIV"), []));
		}
		
		F.line = 262;
		togglevis_164329(document.getElementById("toc-list"));
	framePtr = F.prev;

	
}
var db_164523 = [null];
var contents_164525 = [null];
var oldtoc_164959 = [null];
var timer_164960 = [null];

function raiseRangeError() {
		var e_22441 = null;
		e_22441 = {m_type: NTI4062, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_22441.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_22441.parent = null;
		raiseException(e_22441, "RangeError");

	
}

function nsuToLowerAsciiChar(c_151780) {
	var result_151781 = 0;

	var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet2[c_151780] != undefined)) {
		F.line = 222;
		result_151781 = chckRange(addInt(c_151780, 32), 0, 255);
		}
		else {
			F.line = 224;
			result_151781 = c_151780;
		}
		
	framePtr = F.prev;

	return result_151781;

}

function fuzzy_match_162070(pattern_162072, str_162073) {
							var Tmp4;
							var Tmp5;
								var Tmp6;

	var result_162077 = {Field0: 0, Field1: false};

	var F={procname:"fuzzysearch.fuzzyMatch",prev:framePtr,filename:"fuzzysearch.nim",line:0};
	framePtr = F;
		F.line = 37;
		var score_state_162078 = -100;
		F.line = 38;
		var header_matched_162079 = false;
		F.line = 39;
		var unmatched_leading_char_count_162081 = 0;
		F.line = 40;
		var consecutive_match_count_162083 = 0;
		F.line = 41;
		var str_index_162085 = 0;
		F.line = 42;
		var pat_index_162087 = 0;
		F.line = 43;
		var score_162089 = 0;
		L1: do {
			F.line = 49;
				L2: while (true) {
				if (!((str_index_162085 < (str_162073 != null ? str_162073.length : 0)) && (pat_index_162087 < (pattern_162072 != null ? pattern_162072.length : 0)))) break L2;
					L3: do {
						F.line = 51;
						var pattern_char_162095 = nsuToLowerAsciiChar(pattern_162072.charCodeAt(chckIndx(pat_index_162087, 0, pattern_162072.length+0-1)-0));
						F.line = 52;
						var str_char_162096 = nsuToLowerAsciiChar(str_162073.charCodeAt(chckIndx(str_index_162085, 0, str_162073.length+0-1)-0));
						if ((ConstSet3[pattern_char_162095] != undefined)) {
						F.line = 56;
						pat_index_162087 = addInt(pat_index_162087, 1);
						F.line = 57;
						break L3;
						}
						
						if ((ConstSet4[str_char_162096] != undefined)) {
						F.line = 59;
						str_index_162085 = addInt(str_index_162085, 1);
						F.line = 60;
						break L3;
						}
						
						if ((!(header_matched_162079) && (str_char_162096 == 58))) {
						F.line = 65;
						header_matched_162079 = true;
						F.line = 66;
						score_state_162078 = -100;
						F.line = 67;
						score_162089 = Math.trunc(Math.floor((5.0000000000000000e-001 * score_162089)));
						F.line = 68;
						pat_index_162087 = 0;
						F.line = 69;
						str_index_162085 = addInt(str_index_162085, 1);
						F.line = 70;
						break L3;
						}
						
						if ((str_char_162096 == pattern_char_162095)) {
						F.line = 73;
						switch (score_state_162078) {
						case -100:
						case 20:
							F.line = 75;
							score_state_162078 = 10;
							break;
						case 0:
							F.line = 78;
							score_state_162078 = 5;
							F.line = 78;
							score_162089 = addInt(score_162089, score_state_162078);
							break;
						case 10:
						case 5:
							F.line = 81;
							consecutive_match_count_162083 = addInt(consecutive_match_count_162083, 1);
							F.line = 82;
							score_state_162078 = 5;
							F.line = 83;
							score_162089 = addInt(score_162089, mulInt(5, consecutive_match_count_162083));
							if ((score_state_162078 == 10)) {
							F.line = 86;
							score_162089 = addInt(score_162089, 10);
							}
							
							F.line = 88;
							var on_boundary_162171 = (pat_index_162087 == (pattern_162072 != null ? (pattern_162072.length-1) : -1));
							if ((!(on_boundary_162171) && (str_index_162085 < (str_162073 != null ? (str_162073.length-1) : -1)))) {
							F.line = 91;
							var next_pattern_char_162172 = nsuToLowerAsciiChar(pattern_162072.charCodeAt(chckIndx(addInt(pat_index_162087, 1), 0, pattern_162072.length+0-1)-0));
							F.line = 92;
							var next_str_char_162173 = nsuToLowerAsciiChar(str_162073.charCodeAt(chckIndx(addInt(str_index_162085, 1), 0, str_162073.length+0-1)-0));
							F.line = 95;
							if (!!((ConstSet5[next_str_char_162173] != undefined))) Tmp4 = false; else {								Tmp4 = !((next_str_char_162173 == next_pattern_char_162172));							}							on_boundary_162171 = Tmp4;
							}
							
							if (on_boundary_162171) {
							F.line = 100;
							score_state_162078 = 20;
							F.line = 100;
							score_162089 = addInt(score_162089, score_state_162078);
							}
							
							break;
						case -1:
						case -3:
							F.line = 103;
							if (!((ConstSet6[str_162073.charCodeAt(chckIndx(subInt(str_index_162085, 1), 0, str_162073.length+0-1)-0)] != undefined))) Tmp5 = true; else {								if (!(ConstSet7[str_162073.charCodeAt(chckIndx(subInt(str_index_162085, 1), 0, str_162073.length+0-1)-0)] != undefined)) Tmp6 = false; else {									Tmp6 = (ConstSet8[str_162073.charCodeAt(chckIndx(str_index_162085, 0, str_162073.length+0-1)-0)] != undefined);								}								Tmp5 = Tmp6;							}							var is_leading_char_162211 = Tmp5;
							if (is_leading_char_162211) {
							F.line = 110;
							score_state_162078 = 10;
							}
							else {
								F.line = 114;
								score_state_162078 = 0;
								F.line = 114;
								score_162089 = addInt(score_162089, score_state_162078);
							}
							
							break;
						}
						F.line = 115;
						pat_index_162087 = addInt(pat_index_162087, 1);
						}
						else {
							F.line = 118;
							switch (score_state_162078) {
							case -100:
								F.line = 120;
								score_state_162078 = -3;
								F.line = 120;
								score_162089 = addInt(score_162089, score_state_162078);
								break;
							case 5:
								F.line = 123;
								score_state_162078 = -1;
								F.line = 123;
								score_162089 = addInt(score_162089, score_state_162078);
								F.line = 124;
								consecutive_match_count_162083 = 0;
								break;
							case -3:
								if ((unmatched_leading_char_count_162081 < 3)) {
								F.line = 128;
								score_state_162078 = -3;
								F.line = 128;
								score_162089 = addInt(score_162089, score_state_162078);
								}
								
								F.line = 129;
								unmatched_leading_char_count_162081 = addInt(unmatched_leading_char_count_162081, 1);
								break;
							default: 
								F.line = 132;
								score_state_162078 = -1;
								F.line = 132;
								score_162089 = addInt(score_162089, score_state_162078);
								break;
							}
						}
						
						F.line = 134;
						str_index_162085 = addInt(str_index_162085, 1);
					} while(false);
				}
		} while(false);
		F.line = 137;
		var colontmp__165063 = nimMax(0, score_162089);
		F.line = 138;
		var colontmp__165064 = (0 < score_162089);
		F.line = 136;
		nimCopy(result_162077, {Field0: colontmp__165063, Field1: colontmp__165064}, NTI162074);
	framePtr = F.prev;

	return result_162077;

}

function text_163120(s_163122) {
	var result_163123 = null;

	var F={procname:"dochack.text",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 26;
		result_163123 = document.createTextNode(toJSStr(s_163122));
	framePtr = F.prev;

	return result_163123;

}

function dosearch_164557(value_164559) {

		function HEX3Aanonymous_164871(a_164880, b_164881) {
			var result_164885 = 0;

			var F={procname:"dosearch.:anonymous",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
				F.line = 305;
				result_164885 = subInt(b_164881["Field1"], a_164880["Field1"]);
			framePtr = F.prev;

			return result_164885;

		}

	var result_164560 = null;

	var F={procname:"dochack.dosearch",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if (((db_164523[0] != null ? db_164523[0].length : 0) == 0)) {
		F.line = 272;
		var stuff_164566 = null;
		F.line = 273;
		    var request = new XMLHttpRequest();
    request.open("GET", "theindex.html", false);
    request.send(null);

    var doc = document.implementation.createHTMLDocument("theindex");
    doc.documentElement.innerHTML = request.responseText;

    //parser=new DOMParser();
    //doc=parser.parseFromString("<html></html>", "text/html");

    stuff_164566 = doc.documentElement;
    
		F.line = 286;
		db_164523[0] = nimCopy(null, stuff_164566.getElementsByClassName("reference"), NTI44305);
		F.line = 287;
		contents_164525[0] = nimCopy(null, [], NTI164579);
		L1: do {
			F.line = 288;
			var ahref_164814 = null;
			F.line = 185;
			var i_165043 = 0;
			F.line = 186;
			var l_165044 = (db_164523[0] != null ? db_164523[0].length : 0);
			L2: do {
				F.line = 187;
					L3: while (true) {
					if (!(i_165043 < l_165044)) break L3;
						F.line = 288;
						ahref_164814 = db_164523[0][chckIndx(i_165043, 0, db_164523[0].length+0-1)-0];
						F.line = 289;
						if (contents_164525[0] != null) { contents_164525[0].push(ahref_164814.getAttribute("data-doc-search-tag")); } else { contents_164525[0] = [ahref_164814.getAttribute("data-doc-search-tag")]; };
						F.line = 189;
						i_165043 = addInt(i_165043, 1);
						if (!(((db_164523[0] != null ? db_164523[0].length : 0) == l_165044))) {
						F.line = 190;
						failed_assert_impl_15051(makeNimstrLit("C:\\Users\\gt\\.choosenim\\toolchains\\nim-0.20.2.64\\lib\\system\\iterators.nim(190, 11) `len(a) == L` the length of the seq changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		}
		
		F.line = 290;
		var ul_164825 = tree_163020(makeNimstrLit("UL"), []);
		F.line = 291;
		result_164560 = tree_163020(makeNimstrLit("DIV"), []);
		F.line = 292;
		set_class_163103(result_164560, makeNimstrLit("search_results"));
		F.line = 293;
		var matches_164844 = [];
		L4: do {
			F.line = 294;
			var i_164857 = 0;
			F.line = 2716;
			var colontmp__165050 = 0;
			F.line = 294;
			colontmp__165050 = (db_164523[0] != null ? db_164523[0].length : 0);
			F.line = 2717;
			var i_165051 = 0;
			L5: do {
				F.line = 2718;
					L6: while (true) {
					if (!(i_165051 < colontmp__165050)) break L6;
						F.line = 294;
						i_164857 = i_165051;
						L7: do {
							F.line = 295;
							var c_164858 = contents_164525[0][chckIndx(i_164857, 0, contents_164525[0].length+0-1)-0];
							if (((c_164858 == "Examples") || (c_164858 == "PEG construction"))) {
							F.line = 300;
							break L7;
							}
							
							F.line = 301;
							var colontmp__165060 = {Field0: 0, Field1: false};
							F.line = 301;
							var score_164859 = 0;
							F.line = 301;
							var matched_164860 = false;
							F.line = 301;
							nimCopy(colontmp__165060, fuzzy_match_162070(value_164559, c_164858), NTI162074);
							F.line = 301;
							score_164859 = colontmp__165060["Field0"];
							F.line = 301;
							matched_164860 = colontmp__165060["Field1"];
							if (matched_164860) {
							F.line = 303;
							if (matches_164844 != null) { matches_164844.push({Field0: db_164523[0][chckIndx(i_164857, 0, db_164523[0].length+0-1)-0], Field1: score_164859}); } else { matches_164844 = [{Field0: db_164523[0][chckIndx(i_164857, 0, db_164523[0].length+0-1)-0], Field1: score_164859}]; };
							}
							
						} while(false);
						F.line = 2720;
						i_165051 = addInt(i_165051, 1);
					}
			} while(false);
		} while(false);
		F.line = 305;
		matches_164844.sort(HEX3Aanonymous_164871);
		L8: do {
			F.line = 306;
			var i_164924 = 0;
			F.line = 2716;
			var colontmp__165056 = 0;
			F.line = 306;
			colontmp__165056 = nimMin((matches_164844 != null ? matches_164844.length : 0), 19);
			F.line = 2717;
			var i_165057 = 0;
			L9: do {
				F.line = 2718;
					L10: while (true) {
					if (!(i_165057 < colontmp__165056)) break L10;
						F.line = 306;
						i_164924 = i_165057;
						F.line = 307;
						matches_164844[chckIndx(i_164924, 0, matches_164844.length+0-1)-0]["Field0"].innerHTML = matches_164844[chckIndx(i_164924, 0, matches_164844.length+0-1)-0]["Field0"].getAttribute("data-doc-search-tag");
						F.line = 308;
						add_163085(ul_164825, tree_163020(makeNimstrLit("LI"), [matches_164844[chckIndx(i_164924, 0, matches_164844.length+0-1)-0]["Field0"]]));
						F.line = 2720;
						i_165057 = addInt(i_165057, 1);
					}
			} while(false);
		} while(false);
		if ((ul_164825.childNodes.length == 0)) {
		F.line = 310;
		add_163085(result_164560, tree_163020(makeNimstrLit("B"), [text_163120(makeNimstrLit("no search results"))]));
		}
		else {
			F.line = 312;
			add_163085(result_164560, tree_163020(makeNimstrLit("B"), [text_163120(makeNimstrLit("search results"))]));
			F.line = 313;
			add_163085(result_164560, ul_164825);
		}
		
	framePtr = F.prev;

	return result_164560;

}

function search() {

		function wrapper_164991() {
			var F={procname:"search.wrapper",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
				F.line = 320;
				var elem_164993 = document.getElementById("searchInput");
				F.line = 321;
				var value_164994 = elem_164993.value;
				if (!(((value_164994 != null ? value_164994.length : 0) == 0))) {
				if ((oldtoc_164959[0] == null)) {
				F.line = 324;
				oldtoc_164959[0] = document.getElementById("tocRoot");
				}
				
				F.line = 325;
				var results_165000 = dosearch_164557(value_164994);
				F.line = 326;
				replace_by_id_163172("tocRoot", results_165000);
				}
				else {
				if (!((oldtoc_164959[0] == null))) {
				F.line = 328;
				replace_by_id_163172("tocRoot", oldtoc_164959[0]);
				}
				}
			framePtr = F.prev;

			
		}

	var F={procname:"dochack.search",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if (!((timer_164960[0] == null))) {
		F.line = 330;
		clearTimeout(timer_164960[0]);
		}
		
		F.line = 331;
		timer_164960[0] = setTimeout(wrapper_164991, 400);
	framePtr = F.prev;

	
}
